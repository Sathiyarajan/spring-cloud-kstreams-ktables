spring:
  cloud:
    stream:
      kafka:
        streams:
          binder:
            brokers: ${kafkaBroker2}
            applicationId: multi-binder-kafka-streams
            configuration:
              default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              default.value.serde: org.apache.kafka.common.serialization.Serdes$BytesSerde
              commit.interval.ms: 1000
      bindings:
        input:
          destination: dataIn
          binder: kafka1
          group: testGroup
        output:
          destination: dataOut
          binder: kafka2
        #Test source binding (used for testing)
        output1:
          destination: dataIn
          binder: kafka1
        #Test sink binding (used for testing)
        input1:
          destination: dataOut
          binder: kafka2
        input2:
          destination: foobar
          binder: kafka3
      binders:
        kafka1:
         type: kafka
         environment:
           spring:
             cloud:
               stream:
                kafka:
                  binder:
                    brokers: ${kafkaBroker1}
        kafka2:
         type: kafka
         environment:
           spring:
             cloud:
               stream:
                 kafka:
                   binder:
                     brokers: ${kafkaBroker2}
        kafka3:
           type: kstream



